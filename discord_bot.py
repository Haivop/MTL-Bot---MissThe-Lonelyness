from contextlib import nullcontext

import asyncpg
import discord
from discord.ext import commands
from discord.ui import View, Button
TOKEN = 'MTM2Mzk0NDQxOTcwNjkyOTQyNQ.GxTMM3.h05THtkpNeL8s4Idn4O76dJcFTRYFJneSo30qA'

PREFIX = '!'
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix=PREFIX, intents=intents)

db_pool = None

# Declare db_pool as None initially
@bot.event
async def on_ready():
    global db_pool
    db_pool = await asyncpg.create_pool(
        user="discord_bot_user",
        password="discord_bot_password",
        database="postgres",
        host="127.0.0.1",
        port="5432"
    )
    print(f'Bot connected as {bot.user}')

# –ö–æ–º–∞–Ω–¥–∞ help
@bot.command()
async def info(ctx):
    info_text = (
        "üß† –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –æ–±—Ä–∞—Ç–∏ –Ω–∞—Å—Ç—ñ–ª—å–Ω—É –≥—Ä—É!\n"
        "üîç –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:\n"
        "‚Ä¢ –í–∏–±—ñ—Ä –≥—Ä–∏\n"
        "‚Ä¢ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –≥—Ä–∏\n"
        "‚Ä¢ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É\n"
        "–†–æ–∑–≤–∞–∂–∞–π—Å—è!"
    )
    await ctx.send(info_text)

# –ö–æ–º–∞–Ω–¥–∞ info
@bot.command()
async def help_command(ctx):
    help_text = (
        "**üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:**\n"
        "`!info` - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞\n"
        "`!help_command` - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "`!choose_game` - –û–±—Ä–∞—Ç–∏ –≥—Ä—É –¥–ª—è –≥—Ä–∏"
    )
    await ctx.send(help_text)

@bot.command()
async def choose_game(ctx):
    async with db_pool.acquire() as conn:
        rows = await conn.fetch("SELECT id, name FROM games ORDER BY name")
        if not rows:
            await ctx.send("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–≥–æ—Ä.")
            return

        view = GameSelectionView(rows)
        await ctx.send("üé≤ –û–±–µ—Ä–∏ –≥—Ä—É:", view=view)

class GameSelectionView(View):
    def __init__(self, games):
        super().__init__(timeout=None)
        for row in games:
            self.add_item(GameButton(label=row['name'], game_id=row['id']))

class GameButton(Button):
    def __init__(self, label, game_id):
        super().__init__(label=label, style=discord.ButtonStyle.primary, custom_id=str(game_id))
        self.game_id = game_id
        self.rows = []

    async def select_rules(self):
        async with db_pool.acquire() as conn:
            self.rows = await conn.fetch(f"SELECT id, name FROM rules_category WHERE game_id = {self.game_id} AND parent_id IS NULL")
            if not self.rows:
                return
            return RulesMenu(self.rows)

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_message(
            f"–í–∏ –æ–±—Ä–∞–ª–∏ **{self.label}**. –Ø–∫—ñ –ø—Ä–∞–≤–∏–ª–∞ –±–∞–∂–∞—î—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å?",
            view = await self.select_rules(),
            ephemeral=True
        )

class RulesMenu(View):
    def __init__(self, rules):
        super().__init__(timeout=None)
        for row in rules:
            self.add_item(RulesButton(label=row['name'], rule_id=row['id']))


class RulesButton(Button):
    def __init__(self, label, rule_id):
        super().__init__(label=label, style=discord.ButtonStyle.primary, custom_id=str(rule_id))
        self.rule_id = rule_id
        self.rows = []

    async def select_rules(self):
        async with db_pool.acquire() as conn:
            self.rows = await conn.fetch(f"SELECT id, content FROM rules WHERE category_id = {self.rule_id}")
            if self.rows:
                return self.rows[0][1]
            return

    async def select_category(self):
        async with db_pool.acquire() as conn:
            self.rows = await conn.fetch(f"SELECT id, name FROM rules_category WHERE parent_id = {self.rule_id}")
            if not self.rows:
                return
            return RulesMenu(self.rows)

    async def callback(self, interaction: discord.Interaction):
        if await self.select_rules():
            await interaction.response.send_message(
                f"{await self.select_rules()}",
                view=await self.select_category(),
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                view=await self.select_category(),
                ephemeral=True
            )

bot.run(TOKEN)

# import discord
# import psycopg2
# import asyncpg
# from discord.ext import commands
# from discord.ui import View, Button
#
# TOKEN = 'MTM2Mzk0NDQxOTcwNjkyOTQyNQ.GxTMM3.h05THtkpNeL8s4Idn4O76dJcFTRYFJneSo30qA'
# PREFIX = '!'
# intents = discord.Intents.default()
# intents.message_content = True
#
# bot = commands.Bot(command_prefix=PREFIX, intents=intents)
#
# db_pool = asyncpg.create_pool(
#     user="discord_bot_user",
#     password="discord_bot_password",
#     database="mtldatabase",
#     host="127.0.0.1",
#     port="5432"
# )
# print(f'Bot connected as {bot.user}')
#
# # –ö–æ–º–∞–Ω–¥–∞ info
# @bot.command()
# async def info(ctx):
#     info_text = (
#         "üß† –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –æ–±—Ä–∞—Ç–∏ –Ω–∞—Å—Ç—ñ–ª—å–Ω—É –≥—Ä—É!\n"
#         "üîç –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:\n"
#         "‚Ä¢ –í–∏–±—ñ—Ä –≥—Ä–∏\n"
#         "‚Ä¢ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∞–≤–∏–ª –≥—Ä–∏\n"
#         "‚Ä¢ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É\n"
#         "–†–æ–∑–≤–∞–∂–∞–π—Å—è!"
#     )
#     await ctx.send(info_text)
#
#
# # –ö–æ–º–∞–Ω–¥–∞ help
# @bot.command()
# async def help_command(ctx):
#     help_text = (
#         "**üìå –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:**\n"
#         "`!info` - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞\n"
#         "`!help_command` - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
#         "`!choose_game` - –û–±—Ä–∞—Ç–∏ –≥—Ä—É –¥–ª—è –≥—Ä–∏"
#     )
#     await ctx.send(help_text)
#
#
# # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –≥—Ä–∏
# class GameSelectionView(View):
#     def __init__(self):
#         super().__init__()
#
#     @discord.ui.button(label="–®–∞—Ö–∏", style=discord.ButtonStyle.primary, custom_id="chess")
#     async def chess_button(self, interaction: discord.Interaction, button: Button):
#         await interaction.response.send_message("–í–∏ –æ–±—Ä–∞–ª–∏ **–®–∞—Ö–∏**. –©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?",
#                                                 view=RulesOrLinkView("chess"), ephemeral=True)
#
#     @discord.ui.button(label="DND", style=discord.ButtonStyle.primary, custom_id="dnd")
#     async def dnd_button(self, interaction: discord.Interaction, button: Button):
#         await interaction.response.send_message("–í–∏ –æ–±—Ä–∞–ª–∏ **DND**. –©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?", view=RulesOrLinkView("dnd"),
#                                                 ephemeral=True)
#
#
# # –ö–Ω–æ–ø–∫–∏ "–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞" –∞–±–æ "–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è"
# class RulesOrLinkView(View):
#     def __init__(self, game):
#         super().__init__()
#         self.game = game
#
#         # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞"
#         self.add_item(ReadRulesButton(game))
#
#         # –ö–Ω–æ–ø–∫–∞-–ø–æ—Å–∏–ª–∞–Ω–Ω—è
#         self.add_item(Button(label="–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è", style=discord.ButtonStyle.link, url=self.get_game_link(game)))
#
#     def get_game_link(self, game):
#         if game == "chess":
#             return "https://www.chess.com/play"
#         elif game == "dnd":
#             return "https://dnd.wizards.com/"
#         return "#"
#
#
# class ReadRulesButton(Button):
#     def __init__(self, game):
#         super().__init__(label="–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞", style=discord.ButtonStyle.secondary, custom_id=f"rules_{game}")
#         self.game = game
#
#     async def callback(self, interaction: discord.Interaction):
#         if self.game == "chess":
#             await interaction.response.send_message(
#                 "**–ü—Ä–∞–≤–∏–ª–∞ —à–∞—Ö—ñ–≤:**\n–ö–æ–∂–µ–Ω –≥—Ä–∞–≤–µ—Ü—å –∫–µ—Ä—É—î 16 —Ñ—ñ–≥—É—Ä–∞–º–∏. –ú–µ—Ç–∞ ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –º–∞—Ç –∫–æ—Ä–æ–ª—é —Å—É–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞. –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ä–æ–∑—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞ —Ö–æ–¥–∏ —Ñ—ñ–≥—É—Ä –¥–æ–∫–ª–∞–¥–Ω–æ –æ–ø–∏—Å–∞–Ω—ñ [—Ç—É—Ç](https://www.chess.com/ru/learn-how-to-play-chess)."
#             )
#         elif self.game == "dnd":
#             await interaction.response.send_message(
#                 "**–ü—Ä–∞–≤–∏–ª–∞ DND:**\n–ì—Ä–∞–≤—Ü—ñ —Å—Ç–≤–æ—Ä—é—é—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤ —ñ –±–µ—Ä—É—Ç—å —É—á–∞—Å—Ç—å —É —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–Ω–∏—Ö –ø—Ä–∏–≥–æ–¥–∞—Ö –ø—ñ–¥ –∫–µ—Ä—ñ–≤–Ω–∏—Ü—Ç–≤–æ–º –º–∞–π—Å—Ç—Ä–∞ –≥—Ä–∏. –ë—ñ–ª—å—à–µ [—Ç—É—Ç](https://www.dndbeyond.com/essentials)."
#             )
#         else:
#             await interaction.response.send_message("–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ü—ñ—î—ó –≥—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
#
#
# @bot.command()
# async def choose_game(ctx):
#     await ctx.send("üé≤ –û–±–µ—Ä–∏ –≥—Ä—É:", view=GameSelectionView())
#
# bot.run(TOKEN)
